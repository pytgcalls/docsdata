<page>
    <h1>Idle</h1>
    <text>
        This function will run indefinitely in order to block the main script
        execution and prevent it from exiting while having client(s) that are still running in the background.

        PyTgCalls works by keeping your handlers in a pool of worker threads, which run
        concurrently outside the main thread. Calling idle() will ensure that the client(s) remain active, by
        preventing the main script from ending until you decide to quit.

        Once a signal is received (e.g.: from CTRL+C) the function will terminate and your main script will continue.
    </text>
    <h3>Example</h3>
    <syntax-highlight mark="15">
        from pytgcalls import Client
        from pytgcalls import idle
        ...

        app1 = PyTgCalls(client1)
        app2 = PyTgCalls(client2)
        app3 = PyTgCalls(client3)

        ...  # Set handlers up

        app1.start()
        app2.start()
        app3.start()

        idle()
    </syntax-highlight>
    <separator/>
    <h2>Details</h2>
    <category-title noref="true">
        <ref src="method">pytgcalls.<sb>idle</sb></ref>()
    </category-title>
    <subtext>
        <text>Blocks the main script execution until a signal is received.</text>
    </subtext>
</page>