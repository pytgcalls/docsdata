<page>
    <h1>Changelogs</h1>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgSep24.png"
            minititle="MINOR UPDATE"
            bigtitle="PyTgCalls v2.0.3"
            description="Private Calls Stable, Performances Improvements and more!"
            mainbg="#070d16"
            version="2.0.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>Private Calls are Now Stable:</b> Easily make private calls, even for groups, with a single methodâ€”just use <docs-ref link="/PyTgCalls/Basic Methods/Play">play()</docs-ref>! Check out the example here: <a href="https://github.com/pytgcalls/pytgcalls/blob/master/example/p2p_example/example_p2p.py">Private Calls</a>.</text></item>
                <item><text><b>Performance Boost:</b>  We're now running the latest WebRTC version (<a href="https://chromiumdash.appspot.com/branches">m128</a>), bringing key performance fixes. Plus, with the latest pybind11 update, issues with Python's garbage collection have been resolved for a smoother experience.</text></item>
                <item><text><b>New "adjust_by_height" Feature:</b> Adjust video resolution by height instead of width, giving you more flexibility in how you manage your video streams. Learn more <docs-ref link="/PyTgCalls/Stream Descriptors/VideoParameters">here</docs-ref>.</text></item>
                <item><text><b>New Event Handlers (remove_handler &amp; add_handler):</b> These methods allow you to register listeners for existing events just like the decorators in the library. Use them to handle events such as "stream ended" or "new user connected" within PyTgCalls. Find out more <docs-ref link="/PyTgCalls/Using Handlers">here</docs-ref>.</text></item>
                <item><text><b>Improved Documentation:</b> Enjoy clearer, more detailed documentation with fresh examples, a new UI, a powerful search engine, and step-by-step guidance to help you get started quickly.</text></item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
            <h3 noref="true">Community Milestone</h3>
            <text>
                <b>Thank You All:</b> We've reached a new milestone with over 400 thousand of active monthly users! We're grateful for your support and feedback, which has helped us improve PyTgCalls and make it the go-to library for all your real-time communication needs.
            </text>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgApr24.png"
            minititle="MAJOR UPDATE"
            bigtitle="PyTgCalls v2.0.X"
            description="Private Calls, Code Rework, Async Support and more!"
            mainbg="#070d16"
            version="2.0.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>Private Calls:</b> Now you can make private calls by just using a single method for also group calls, by using <docs-ref link="/PyTgCalls/Basic Methods/Play">play()</docs-ref>.</text></item>
                <item><text><b>Code Rework:</b> The code has been reworked to improve performance, stability and to make it more readable.</text></item>
                <item><text><b>Async Support:</b> NTgCalls now supports asynchronous methods for improved performance.</text></item>
                <item><text><b>Filters for Updates:</b> Added filters for updates to allow for more granular control over updates, <docs-ref link="/PyTgCalls/Filters">More Info</docs-ref>.</text></item>
                <item><text><b>Improved Documentation:</b> Updated documentation with more examples, new UI and comprehensive guidance.</text></item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
            <h3 noref="true">Breaking Changes</h3>
            <list>
                <item>
                    <text>Now methods like <code>change_stream()</code> and <code>join_group_call()</code> was removed, now you can use <code>play()</code> for both private, group calls and changing streams.</text>
                    <multisyntax as-blame="true">
                        <syntax-highlight>
                            # Change stream
                            call_py.change_stream(
                                -1001234567890,
                                AudioPiped(
                                    'input.mp4',
                                ),
                            )
                            <br/>
                            # Join group call
                            call_py.join_group_call(
                                -1001234567890,
                                AudioPiped(
                                    'input.mp4',
                                ),
                            )
                        </syntax-highlight>
                        <syntax-highlight>
                            # Change stream
                            call_py.play(
                                -1001234567890,
                                AudioPiped(
                                    'input.mp4',
                                ),
                            )
                            <br/>
                            # Join group call
                            call_py.play(
                                -1001234567890,
                                AudioPiped(
                                    'input.mp4',
                                ),
                            )
                        </syntax-highlight>
                    </multisyntax>
                </item>
                <item>
                    <text>Now all listeners like <code>on_stream_end()</code> was unified in <code>on_update()</code> and with <docs-ref link="/PyTgCalls/Filters">filters</docs-ref>, for example:</text>
                    <multisyntax as-blame="true">
                        <syntax-highlight>
                            # On Closed Voice Chat
                            @call_py.on_closed_voice_chat()
                            async def on_closed_voice_chat(client: PyTgCalls, update: Update):
                                print(update)
                            <br/>
                            # On stream end
                            @call_py.on_stream_end()
                            async def on_stream_end(client: PyTgCalls, update: Update):
                                print(update)
                        </syntax-highlight>
                        <syntax-highlight>
                            from pytgcalls import filters
                            from pytgcalls.types import ChatUpdate
                            ...
                            # On Closed Voice Chat
                            @call_py.on_update(filters.chat_update(ChatUpdate.Status.CLOSED_VOICE_CHAT))
                            async def on_closed_voice_chat(client: PyTgCalls, update: Update):
                                print(update)
                            <br/>
                            # On stream end
                            @call_py.on_update(filters.stream_end)
                            async def on_stream_end(client: PyTgCalls, update: Update):
                                print(update)
                        </syntax-highlight>
                    </multisyntax>
                </item>
                <item>
                    <text>Reworked <code>GroupCall</code> type, now is <docs-ref link="/PyTgCalls/Advanced Types/Call">Call</docs-ref> and now is more powerful and easy to use.</text>
                </item>
                <item>
                    <text>Removed <code>JoinedGroupCallParticipant</code> and <code>LeftGroupCallParticipant</code> classes, now you can see the action in <docs-ref link="/PyTgCalls/Advanced Types/GroupCallParticipant">GroupCallParticipant</docs-ref> class.</text>
                </item>
                <item>
                    <text>Removed all legacy types and input stream, now is a mandatory to use <docs-ref link="/PyTgCalls/Stream Descriptors/MediaStream">MediaStream</docs-ref> for all streams.</text>
                </item>
                <item>
                    <text>Now <code>ping()</code> from <docs-ref link="/PyTgCalls/Client">Client</docs-ref> is not anymore a coroutine, now is a normal method.</text>
                </item>
                <item>
                    <text>Removed <code>get_active_call()</code> and <code>get_call()</code>, now is a mandatory to use <code>calls()</code> from <docs-ref link="/PyTgCalls/Client">Client</docs-ref>.</text>
                </item>
                <item>
                    <text>Renamed <code>leave_group_call</code> to <docs-ref link="/PyTgCalls/Basic Methods/Leave Call">leave_call()</docs-ref>.</text>
                </item>
                <item>
                    <text>Moved <code>MediaStream</code> flags under <docs-ref link="/PyTgCalls/Available Enums/MediaStream Flags">MediaStream.Flags</docs-ref> instead of <code>MediaStream</code>.</text>
                </item>
                <item>
                    <text>Now <code>invite_hash</code>, <code>join_as</code> and <code>auto_start</code> are part of <docs-ref link="/PyTgCalls/Advanced Types/GroupCallConfig">GroupCallConfig</docs-ref> instead of <code>join_group_call</code>.</text>
                </item>
                <item>
                    <text>Renamed <code>additional_ffmpeg_parameters</code> to <code>ffmpeg_parameters</code> in <docs-ref link="/PyTgCalls/Stream Descriptors/MediaStream">MediaStream</docs-ref>.</text>
                </item>
                <item>
                    <text>For more info about breaking changes, check the <docs-ref link="/PyTgCalls/Examples">Examples</docs-ref>, if we missed something, please <a href="https://github.com/pytgcalls/docsdata/issues/new">open an issue</a>.</text>
                </item>
            </list>
            <h3 noref="true">Additional Notes</h3>
            <text>
                We're pleased to announce that now is available an unofficial porting of NTgCalls for Rust, for more info, check the <a href="https://github.com/YouKnow-sys/ntgcalls-rs">repository</a>.
            </text>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgFeb24.png"
            minititle="MAJOR UPDATE"
            bigtitle="PyTgCalls v1.2.X"
            description="Static Typing, YtDlp support and More"
            mainbg="#070d16"
            version="1.2.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>Static Typing:</b> PyTgCalls is now fully statically typed, ensuring that the types of each method and class are thoroughly checked.</text></item>
                <item><text><b>YtDlp Support:</b> MediaStream now supports links from YouTube using YtDlp, for example: <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">https://www.youtube.com/watch?v=iSbLHrrqmoM</a></text></item>
                <item>
                    <text><b>MediaStream Quality Support:</b> MediaStream now accepts enhanced quality options for audio and video parameters. For audio, use <docs-ref link="/PyTgCalls/Available Enums/AudioQuality">pytgcalls.types.AudioQuality</docs-ref>, and for video, use <docs-ref link="/PyTgCalls/Available Enums/VideoQuality">pytgcalls.types.VideoQuality</docs-ref>.</text>
                    <multisyntax as-blame="true">
                        <syntax-highlight>
                            call_py.join_group_call(
                                -1001234567890,
                                MediaStream(
                                    'input.mp4',
                                    AudioParameters.from_quality(AudioQuality.STUDIO),
                                    VideoParameters.from_quality(VideoQuality.FHD_1080p),
                                ),
                            )
                        </syntax-highlight>
                        <syntax-highlight>
                            call_py.join_group_call(
                                -1001234567890,
                                MediaStream(
                                    'input.mp4',
                                    AudioQuality.STUDIO,
                                    VideoQuality.FHD_1080p,
                                ),
                            )
                        </syntax-highlight>
                    </multisyntax>
                </item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
            <h3 noref="true">Breaking Changes</h3>
            <list>
                <item><text>Now all raw methods like AudioParameters, VideoParameters, AudioStream, VideoStream, and Stream are all under <code>pytgcalls.types.raw</code> instead of <code>pytgcalls.types</code>.</text></item>
                <item><text>The exception class <code>pytgcalls.exceptions.TelegramServerError</code> is now part of <code>ntgcalls.TelegramServerError</code>.</text></item>
            </list>
            <h3 noref="true">Additional Notes</h3>
            <text>
                We're pleased to announce that pre-compiled wheels optimized for ARM64 devices are now available.
            </text>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgCon24.png"
            minititle="NEWS"
            bigtitle="#PyTgCon2K24"
            description="If you've crafted a public open repository, it's time to showcase your work in the PyTgCalls Contest! ðŸŒŸ"
            mainbg="#070d16"
            version="1.1.6"
            imagewidth="1920"
            imageheight="1080"
            presentationtitle="PyTgCalls Contest"
            presentationdescription="Competition for bot developers"
            presentationbuttontitle="Participate"
            presentationbuttonurl="https://github.com/pytgcalls/pytgcalls/discussions/199"
            presentationimage="/src/assets/contest.png"
        />
        <subtext>
            <h3 noref="true">Here's how to join:</h3>
            <list>
                <item><text><b>Visit the discussion page:</b> <a href="https://github.com/pytgcalls/pytgcalls/discussions/199">PyTgCalls Contest</a></text></item>
                <item><text><b> Share these details:</b> Your Repository Name, Brief Description of Your Bot, Link to Your Repository</text></item>
            </list>
            <h3 noref="true">Prizes and Recognition</h3>
            <list>
                <item><text>Encourage upvotes by reposting this message in your channels.</text></item>
                <item><text>The bot with the highest upvotes earns a prestigious place in the PyTgCalls documentation.</text></item>
            </list>
            <h3 noref="true">Contest Rules</h3>
            <list>
                <item><text>Make sure your repository goes beyond minor tweaks of a fork.</text></item>
                <item><text>Use the <a href="https://pypi.org/project/py-tgcalls/1.1.2/">latest</a> PyTgCalls version).</text></item>
                <item><text>Your repository should be public.</text></item>
            </list>
            <text>Join the contest now and showcase your PyTgCalls-powered bot for a chance to be featured prominently on the PyTgCalls documentation! Good luck!</text>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgDec23v2.png"
            minititle="MINOR UPDATE"
            bigtitle="PyTgCalls v1.1.X"
            description="Unified Stream Design, AutoStart GroupCalls and More"
            mainbg="#070d16"
            version="1.1.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>AutoStart of Group Calls:</b> Now GroupCalls will be started automatically if they are not started, if you want to know how to disable it, <docs-ref link="/PyTgCalls/Basic Methods/Play#Details">read here</docs-ref>.</text></item>
                <item>
                    <text><b>Unified Stream Design:</b> Now you can do whatever you want, streaming audio, video, both, recording the stream etc. with just one class!.</text>
                    <multisyntax as-blame="true">
                        <syntax-highlight>
                            # Play audio and video from and MP4 file
                            call_py.join_group_call(
                                -1001234567890,
                                AudioVideoPiped(
                                    'input.mp4',
                                ),
                            )
                            <br/>
                            # Stream audio only from an MP4 file
                            call_py.join_group_call(
                                -1001234567890,
                                AudioPiped(
                                    'input.mp4',
                                ),
                            )
                            <br/>
                            # Stream screen
                            call_py.join_group_call(
                                -1001234567890,
                                CaptureVideoDesktop(
                                    MediaDevices.get_screen_devices()[0],
                                ),
                            )
                        </syntax-highlight>
                        <syntax-highlight>
                            # Play audio and video from and MP4 file
                            call_py.join_group_call(
                                -1001234567890,
                                MediaStream(
                                    'input.mp4',
                                ),
                            )
                            <br/>
                            # Stream audio only from an MP4 file
                            call_py.join_group_call(
                                -1001234567890,
                                MediaStream(
                                    'input.mp4',
                                    video_flags=MediaStream.IGNORE,
                                ),
                            )
                            <br/>
                            # Stream screen
                            call_py.join_group_call(
                                -1001234567890,
                                MediaStream(
                                    MediaDevices.get_screen_devices()[0],
                                ),
                            )
                        </syntax-highlight>
                    </multisyntax>
                </item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
            <h3 noref="true">Deprecation Notice</h3>
            <text>
                As we said in the last post,
                now PyTgCalls <b>0.8.6</b> has reached the <b>end of life</b>,
                so this update is completely incompatible with this or previous versions.
                We have also deprecated most of the Stream Piped methods, here's the list:
            </text>
            <list>
                <item><text>AudioImagePiped</text></item>
                <item><text>AudioPiped</text></item>
                <item><text>AudioVideoPiped</text></item>
                <item><text>CaptureAudioDevice</text></item>
                <item><text>CaptureAVDesktop</text></item>
                <item><text>CaptureAVDeviceDesktop</text></item>
                <item><text>CaptureVideoDesktop</text></item>
                <item><text>VideoPiped</text></item>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgDec23.png"
            minititle="MAJOR UPDATE"
            bigtitle="PyTgCalls v1.0.X"
            description="NTgCalls, Hydrogram Support, New Documentation, and More"
            mainbg="#070d16"
            version="1.0.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>NTgCalls Integration:</b> The PyTgCalls core has been updated to use NTgCalls instead of TgCallsJS, making it more portable and eliminating overhead. Now, you only need to install ffmpeg on your machine, resulting in improved performance.</text></item>
                <item><text><b>Hydrogram Support:</b> Official support for Hydrogram, a new mtproto client based on Pyrogram, providing new possibilities and enhancing the overall experience.</text></item>
                <item><text><b>New Documentation:</b> Revamped documentation with improved clarity, comprehensive examples, and up-to-date guidance for developers.</text></item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
            <h3 noref="true">Community Milestone</h3>
            <text>
                <b>Thank You All:</b> Celebrating over 100 thousand Downloads! The project has seen remarkable growth, averaging around 8,000 downloads per week since its launch. We appreciate the community's strong interest and support.
            </text>
            <h3 noref="true">Deprecation Notice</h3>
            <text>
                <b>End-of-Life (EOL) Dates:</b> Due to changes in Pyrogram and significant time since the release of PyTgCalls 0.8.X, different versions are marked for end-of-life:
            </text>
            <list>
                <item><text><b>0.8.0, 0.8.1, 0.8.2, 0.8.3, 0.8.4, 0.8.5:</b> Support ended due to outdated versions.</text></item>
                <item><text><b>0.8.6:</b> Support will continue until December 18 due to Pyrogram archiving.</text></item>
                <item><text><b>0.9.X:</b> Current Long-Term Support.</text></item>
                <item><text><b>1.0.X:</b> Latest version with high-support rate.</text></item>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgSep22.png"
            minititle="BUG FIXES"
            bigtitle="PyTgCalls v0.9.X"
            description="Feature Enhancements and Bug Fixes"
            mainbg="#070d16"
            version="0.9.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>Time Tracking:</b> Added the ability to determine the time of the currently playing audio/video. For more details, check <docs-ref link="/PyTgCalls/Stream Methods/Played Time">Played Time</docs-ref>.</text></item>
                <item><text><b>New Errors:</b> Introduced two new errors, UnMuteNeeded and RTMPStreamNeeded.</text></item>
            </list>
            <h3 noref="true">Changes &amp; Bug Fixes</h3>
            <list>
                <item><text><b>End of Life for Python3.6:</b> Support for Python 3.6 has reached the end of life and is no longer maintained.</text></item>
                <item><text><b>Security Fix:</b> Addressed a security issue with the ID generation process to enhance overall security.</text></item>
                <item><text><b>Multi-Thread Removal:</b> Removed Multi-Thread Py-TgCalls due to no bug fixes by Node.js for over 4 years.</text></item>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgJul22.png"
            minititle="NEWS"
            bigtitle="Google Partnership!"
            description="Py-TgCalls classified as one of most used projects on PyPI"
            mainbg="#070d16"
            version="0.9.X"
            imagewidth="1920"
            imageheight="1080"
            presentationbuttontitle="Download"
        />
        <subtext>
            <text>
                As we know, Google is in charge of financing Python.
                Due to the recent events with the <a href="https://gitprotect.io/blog/compromised-npm-packages-malware-and-github/">Node.js situation</a>, PyPI ran for cover,
                thanks to the strong collaboration between Python and the Google Open Source Security Team they offered 4000 Titan Tokens for free available only in some regions of the world.
                PyPI to distribute these security tokens was based on a criterion, that is; any project in the top 1% of downloads in the previous 6 months is considered critical,
                at the moment only <b>3500 projects</b> are considered out of <b>350 thousand</b> are considered as such and py-tgcalls is considered a critical project.
                According to statistics last month, it was downloaded <b>684 thousand</b> times.
            </text>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgDec21.png"
            minititle="BUG FIXES"
            bigtitle="PyTgCalls v0.8.3"
            description="WebRTC Retry Fixes and Asynchronous Method Invocation"
            mainbg="#070d16"
            version="0.8.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">Changes &amp; Bug Fixes</h3>
            <list>
                <item><text><b>WebRTC Retry Fixes:</b> Addressed issues with WebRTC retry for more reliable connections.</text></item>
                <item><text><b>Asynchronous Method Invocation:</b> All methods, such as join_group_call, now use asyncio future, waiting for responses from Node.js asynchronously.</text></item>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgNov21.png"
            minititle="MAJOR UPDATE"
            bigtitle="PyTgCalls v0.8.X"
            description="Telethon Support, Group/Channel Join, Video Group Call, and More"
            mainbg="#070d16"
            version="0.8.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item>
                    <text><b>Internal FFmpeg Conversion:</b> Introduced internal FFmpeg conversion for AudioPiped, AudioVideoPiped, and AudioImagePiped for seamless multimedia handling.</text>
                    <syntax-highlight mark="3-5">
                        call_py.join_group_call(
                            -1001234567890,
                            AudioVideoPiped(
                                'input.webm',
                            ),
                            stream_type=StreamType().pulse_stream,
                        )
                    </syntax-highlight>
                </item>
                <item><text><b>Remote Stream Support:</b> Added support for remote streams for more diverse streaming options.</text></item>
                <item><text><b>Stream Image with Audio:</b> Added the ability to stream images with audio using AudioImagePiped.</text></item>
                <item><text><b>GetParticipants and OnParticipantChange:</b> New functionalities for handling participants in group calls.</text></item>
                <item><text><b>Browser Constants as Headers:</b> Added browser constants as headers for FFmpeg.</text></item>
                <item><text><b>Python 3.10 Support:</b> Added compatibility with Python 3.10.</text></item>
            </list>
            <h3 noref="true">Changes &amp; Fixes</h3>
            <list>
                <item><text><b>Proportion Video Support:</b> Added support for all proportion video formats for a more versatile video experience.</text></item>
                <item><text><b>Communication Fix:</b> Addressed stderr overflow by adding a reader for improved Node.js communication.</text></item>
                <item><text><b>WebRTC Connection Retry:</b> Added automatic retry if WebRTC connection fails for more reliable connections.</text></item>
                <item><text><b>Lighter Buffer Reader:</b> Optimized the Buffer Reader for lighter resource usage.</text></item>
                <item><text><b>Multiple Ping Requests:</b> Now supports multiple ping requests for improved responsiveness.</text></item>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgAug21v2.png"
            minititle="MAJOR UPDATE"
            bigtitle="PyTgCalls v0.7.X"
            description="Code Cleanup, Full Asynchronous Support, and Enhanced Functionality"
            mainbg="#070d16"
            version="0.7.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>Custom Exceptions:</b> Added custom exceptions for more robust error handling.</text></item>
                <item><text><b>Platform Support:</b> Added support for Windows, macOS, and Linux Arm64.</text></item>
            </list>
            <h3 noref="true">Changes &amp; Fixes</h3>
            <list>
                <item><text><b>PyTgCalls Re-Base:</b> Code cleanup and fixes for a more streamlined and efficient codebase.</text></item>
                <item><text><b>Fully Async:</b> The library is now fully asynchronous for improved performance.</text></item>
                <item><text><b>Communication Update:</b> Removed the internal socket server for Node.js communication between Python, replaced with stdin and stdout.</text></item>
                <item><text><b>CustomAPI Renewed:</b> CustomAPI upgraded to version 2.1 with new features and improvements.</text></item>
                <item><text><b>RawUpdate Enhancement:</b> RawUpdate renewed with PyTgCalls Object Update for better handling of updates.</text></item>
                <item><text><b>Method Name Change:</b> .run() is now .start() and no longer blocks code execution.</text></item>
                <item><text><b>Logging Update:</b> Now logs are directed to Python Logging for improved logging capabilities.</text></item>
                <item><text><b>Voice Call Handling:</b> If the stream is deleted, the userbot will exit the voice call by printing an error in RawUpdate.</text></item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgAug21.png"
            minititle="MINOR UPDATE"
            bigtitle="PyTgCalls v0.6.X"
            description="Multi-core Beta Support, Function Execution Without Node.js Core Waiting, and More"
            mainbg="#070d16"
            version="0.6.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">What's new?</h3>
            <list>
                <item><text><b>Multi-core support:</b> PyTgCalls now supports multiple cores for enhanced performance.</text></item>
                <item><text><b>Remote version check:</b> Added the ability to check for the latest version available on GitHub remotely.</text></item>
            </list>
            <h3 noref="true">Changes &amp; Fixes</h3>
            <list>
                <item><text><b>CustomAPI 2.0:</b> Upgraded to CustomAPI version 2.0 with new features and improvements.</text></item>
                <item><text><b>Security Fix:</b> Addressed a security vulnerability for a more secure experience.</text></item>
                <item><text><b>Function execution without Node.js Core waiting:</b> Users can now call functions without waiting for the Node.js Core.</text></item>
            </list>
        </subtext>
        <separator/>
    </category>
    <category>
        <br/>
        <banner
            imageurl="/src/assets/updates/PyTgJul21.png"
            minititle="BUG FIXES"
            bigtitle="PyTgCalls v0.5.X"
            description="Smoother Installation, Active Calls Resolved, and Enhanced Error Insight"
            mainbg="#070d16"
            version="0.5.X"
            imagewidth="1920"
            imageheight="1080"
        />
        <subtext>
            <h3 noref="true">Changes &amp; Fixes</h3>
            <list>
                <item><text><b>Fixed PyPi builds: </b>Fixed an issue where PyTgCalls compiled without the JavaScript core</text></item>
                <item><text><b>Improved join_group_call error: </b>The join_group_call error is now more descriptive</text></item>
                <config id="BUG_FIX_CHANGELOGS"/>
            </list>
        </subtext>
    </category>
</page>
