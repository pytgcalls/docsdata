<page>
    <h1>Decorators</h1>
    <text>
        While still being methods bound to the <docs-ref link="/PyTgCalls/Client">PyTgCalls</docs-ref> class,
        decorators hold a special significance that justifies a dedicated page.

        Decorators allow you to register callback functions for handling updates in a much easier and cleaner way.
        All you need to do is add the decorators on top of your functions.
    </text>
    <syntax-highlight mark="8-9">
        from pytgcalls import PyTgCalls
        from pytgcalls.types import Update
        from pytgcalls import filters as call_filters
        ...
        client = # Here Your MTProto Client
        app = PyTgCalls(client)

        @app.on_update(call_filters.stream_end())
        async def handler(client: PyTgCalls, update: Update):
            print(update)

        app.run()
    </syntax-highlight>
    <separator/>
    <h1>PyTgCalls Decorators</h1>
    <br/>
    <category>
        <category-title><ref>@PyTgCalls.<sb>on_update</sb></ref>()</category-title>
        <subtext>
            <text>
                Decorator for handling all incoming updates.
                When any update is received, this decorator will be triggered.
            </text>
            <pg-title>PARAMETERS</pg-title>
            <subtext>
                <category-title><ref>filters</ref>: Optional[<docs-ref link="/PyTgCalls/Filters">Filters</docs-ref>]</category-title>
            </subtext>
            <h3>Example</h3>
            <syntax-highlight mark="5-6">
                from pytgcalls.types import Update
                ...
                app = PyTgCalls(client)
                ...
                @app.on_update()
                async def handler(client: PyTgCalls, update: Update):
                    print(chat_id)
                ...
                app.run()
            </syntax-highlight>
        </subtext>
    </category>
    <br/>
    <h1>CustomApi Decorators</h1>
    <category-title><ref>@CustomApi.<sb>on_update_custom_api</sb></ref>()</category-title>
    <subtext>
        <text>Decorator for handling incoming HTTP events.</text>
        <pg-title>RAISES</pg-title>
        <subtext>
            <category-title>exception <ref>pytgcalls.exceptions.<sb>TooManyCustomApiDecorators</sb></ref></category-title>
            <subtext><text>You have set too many decorators.</text></subtext>
        </subtext>
        <h3>Example</h3>
        <syntax-highlight mark="4-10">
            ...
            webserver = CustomApi(client)
            ...
            @webserver.on_update_custom_api()
            async def handler(request: dict):
                print(update)
                ... # Add Your Code here, switch or etc.
                return {
                    'result': 'OK',
                }
            webserver.start()
            idle()
        </syntax-highlight>
    </subtext>
</page>