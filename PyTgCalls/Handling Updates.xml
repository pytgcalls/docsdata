<page>
    <h1>Handling Updates</h1>
    <text>
        Calling API methods sequentially is cool, but what if, for example, the list of participants changes?
        This page covers updates and how to handle such events in PyTgCalls. Letâ€™s have a look at how they work.
    </text>
    <h2>Defining Updates</h2>
    <text>
        First of all, let's define what these updates are. As hinted earlier, updates are events that happen in PyTgCalls, such as
        joining a group call, changes in the participant list, stream ended etc. They are meant to notify you about a new
        specific state change. These updates are handled by registering one or more callback functions in your app
        using <docs-ref link="/PyTgCalls/Decorators">Decorators</docs-ref>.

        Each handler deals with a specific event. When a matching update arrives from Telegram or NTgCalls, the registered callback
        function will be called back by the framework, and its body will execute.
    </text>
    <h2>Registering a Handler</h2>
    <text>
        To explain how handlers work, let's examine the one that will be in charge of handling <code>StreamVideoEnded</code>
        updates, which occur when a video stream ends. The same setup logic is shared with every type of handler, and you should not
        have troubles settings them up once you have learned from this section.
    </text>
    <h3>Using Decorators</h3>
    <text>The most elegant way to register a stream end handler is by using the <docs-ref link="">on_stream_end()</docs-ref> decorator:</text>
    <syntax-highlight>
        from pytgcalls import PyTgCalls, filters
        from pytgcalls.types import Update
        from pytgcalls.types import MediaStream
        ...
        app = PyTgCalls(client)

        @app.on_update(filters.stream_end)
        async def my_handler(client: PyTgCalls, update: Update):
            if isinstance(update, StreamVideoEnded):
                await pytgcalls.play(
                    -1001185324811,
                    stream=MediaStream(
                        'http://docs.evostream.com/sample_content/assets/sintel1m720p.mp4',
                    )
                )

        app.run()
    </syntax-highlight>
    <text>
        The defined <code>my_handler</code> function, which accepts two arguments (client, update),
        will be executed whenever a new update arrives.
    </text>
    <alert type="note">
        You can mix <code>def</code> and <code>async def</code> handlers as much as you need,
        PyTgCalls will still work concurrently and efficiently regardless of what you choose.
    </alert>
</page>