<config>
  <option id="NTGCALLS_VERSION">1.3.0</option>
  <option id="PYTGCALLS_VERSION">2.1.0</option>
  <option id="PYPI_PACKAGE">py-tgcalls</option>

  <!--REDIRECTS - they are case-insensitive -->
  <redirects>
    <redirect path="/changelog">/PyTgCalls/Changelogs</redirect>
    <redirect path="/changelogs">/PyTgCalls/Changelogs</redirect>
  </redirects>

  <!--MACRO-->
  <!--exceptions-->
  <option id="BASE_EXCEPTIONS">
    <config id="BASE_MTPROTO"/>
    <category-title>exception <ref>pytgcalls.exceptions.<sb>NotInCallError</sb></ref></category-title>
    <subtext><text>This error occurs when attempting to execute an action on a call that you have not joined.</text></subtext>
  </option>

  <option id="UNSUPPORTED_METHOD_EXCEPTION">
    <category-title>exception <ref>pytgcalls.exceptions.<sb>UnsupportedMethod</sb></ref></category-title>
    <subtext><text>This error occurs when attempting to execute an action on a call kind that doesn't support it.</text></subtext>
  </option>

  <option id="BASE_MTPROTO">
    <category-title>exception <ref>pytgcalls.exceptions.<sb>NoMTProtoClient</sb></ref></category-title>
    <subtext><text>This method can only be called with a valid MTProto client set.</text></subtext>

    <category-title>exception <ref>pytgcalls.exceptions.<sb>ClientNotStarted</sb></ref></category-title>
    <subtext>
      <text>
        Ensure you have started the process with <docs-ref link="/PyTgCalls/Basic Methods/Start">start()</docs-ref> before calling this method.
      </text>
    </subtext>
  </option>

  <option id="CONNECTION_EXCEPTIONS">
    <config id="BASE_EXCEPTIONS"/>
    <config id="GROUP_CALL_EXCEPTIONS"/>
  </option>

  <option id="GROUP_CALL_EXCEPTIONS">
    <category-title>exception <ref>pytgcalls.exceptions.<sb>NoActiveGroupCall</sb></ref></category-title>
    <subtext><text>You cannot edit a group call that hasn't been initiated.</text></subtext>
  </option>

  <option id="BASE_SYNC_C_EXCEPTION">
    <category-title><ref><sb><shi language="c">#NTG_INVALID_UID</shi></sb></ref> <shi>-2</shi></category-title>
    <subtext><text>The provided UID is invalid.</text></subtext>
  </option>

  <option id="BASE_C_EXCEPTIONS">
    <category-title><ref><sb><shi language="c">#NTG_UNKNOWN_EXCEPTION</shi></sb></ref> <shi>-1</shi></category-title>
    <subtext><text>An unknown exception occurred.</text></subtext>
  </option>

  <option id="BASE_CONNECTION_EXCEPTIONS">
    <config id="BASE_C_EXCEPTIONS"/>
    <category-title><ref><sb><shi language="c">#NTG_CONNECTION_NOT_FOUND</shi></sb></ref> <shi>-101</shi></category-title>
    <subtext><text>The specified connection was not found.</text></subtext>
  </option>

  <option id="STREAM_C_EXCEPTIONS">
    <category-title><ref><sb><shi language="c">#NTG_FILE_NOT_FOUND</shi></sb></ref> <shi>-200</shi></category-title>
    <subtext><text>The specified file was not found.</text></subtext>

    <category-title><ref><sb><shi language="c">#NTG_ENCODER_NOT_FOUND</shi></sb></ref> <shi>-201</shi></category-title>
    <subtext><text>The required encoder was not found.</text></subtext>

    <category-title><ref><sb><shi language="c">#NTG_FFMPEG_NOT_FOUND</shi></sb></ref> <shi>-202</shi></category-title>
    <subtext><text>FFmpeg is not found in the system.</text></subtext>

    <category-title><ref><sb><shi language="c">#NTG_SHELL_ERROR</shi></sb></ref> <shi>-203</shi></category-title>
    <subtext><text>An error occurred while executing a shell command.</text></subtext>
  </option>

  <option id="SHELL_EXCEPTION">
    <category-title>exception <ref>ntgcalls.<sb>ShellError</sb></ref></category-title>
    <subtext><text>Error while executing the shell script.</text></subtext>
  </option>

  <option id="NTG_STREAM_EXCEPTIONS">
    <category-title>exception <ref>ntgcalls.<sb>InvalidParams</sb></ref></category-title>
    <subtext><text>This error occurs when attempting to send an invalid InputMode.</text></subtext>

    <category-title>exception <ref>ntgcalls.<sb>FileError</sb></ref></category-title>
    <config id="FILE_EXCEPTION_DESC"/>

    <config id="SHELL_EXCEPTION"/>
  </option>

  <option id="STREAM_EXCEPTIONS">
    <category-title>exception <ref><sb>FileNotFoundError</sb></ref></category-title>
    <config id="FILE_EXCEPTION_DESC"/>

    <category-title>exception <ref>ntgcalls.<sb>FFmpegError</sb></ref></category-title>
    <subtext><text>To use Piped input stream, make sure you have FFmpeg installed.</text></subtext>

    <config id="SHELL_EXCEPTION"/>

    <category-title>exception <ref>pytgcalls.exceptions.<sb>NoAudioSourceFound</sb></ref></category-title>
    <subtext><text>The audio file you're trying to play has no audio.</text></subtext>

    <category-title>exception <ref>pytgcalls.exceptions.<sb>NoVideoSourceFound</sb></ref></category-title>
    <subtext><text>The video file you're trying to play has no video.</text></subtext>

    <category-title>exception <ref>pytgcalls.exceptions.<sb>InvalidVideoProportion</sb></ref></category-title>
    <subtext><text>Playing a video with incorrect proportions is not supported.</text></subtext>

    <category-title>exception <ref>pytgcalls.exceptions.<sb>YtDlpError</sb></ref></category-title>
    <subtext><text>This error occurs when yt-dlp encounters an error.</text></subtext>
  </option>

  <option id="GROUPCALL_NOT_FOUND_EXCEPTION">
    <category-title>exception <ref>pytgcalls.exceptions.<sb>GroupCallNotFound</sb></ref></category-title>
    <config id="NO_GROUP_CALL_EXCEPTION_DESC"/>
  </option>

  <option id="TELEGRAM_EXCEPTION">
    <category-title>exception <ref>ntgcalls.<sb>TelegramServerError</sb></ref></category-title>
    <subtext>
      <text>
        This error occurs when the connection between Telegram and the WebRTC service fails.
      </text>
    </subtext>
  </option>

  <option id="TRANSPORT_EXCEPTION">
    <category-title>exception <ref>ntgcalls.<sb>TransportParseException</sb></ref></category-title>
    <subtext><text>This error occurs when attempting to send invalid Transports.</text></subtext>
  </option>

  <option id="CONNECTION_NOT_FOUND_EXCEPTION">
    <category-title>exception <ref>ntgcalls.<sb>ConnectionNotFound</sb></ref></category-title>
    <subtext>
      <text>
        This error occurs when attempting to execute an action on a non-existent Group Call.
      </text>
    </subtext>
  </option>

  <option id="PLAY_EXCEPTIONS">
    <config id="BASE_MTPROTO"/>
    <config id="GROUP_CALL_EXCEPTIONS"/>
    <config id="STREAM_EXCEPTIONS"/>
    <category-title>exception <ref>pytgcalls.exceptions.<sb>CallDeclined</sb></ref></category-title>
    <subtext><text>The call was declined by the user.</text></subtext>
    <category-title>exception <ref>pytgcalls.exceptions.<sb>CallDiscarded</sb></ref></category-title>
    <subtext><text>The call was discarded by the user while connecting.</text></subtext>
    <config id="TELEGRAM_EXCEPTION"/>
    <category-title>exception <ref>pytgcalls.exceptions.<sb>AlreadyJoinedError</sb></ref></category-title>
    <subtext><text>You are attempting to join in a call you're already a part of.</text></subtext>
    <category-title>exception <ref>pytgcalls.exceptions.<sb>UnMuteNeeded</sb></ref></category-title>
    <subtext><text>You need to unmute the userbot or make it an admin to stream audio or video.</text></subtext>
    <config id="RTMP_EXCEPTION"/>
  </option>

  <option id="RUNNING_EXCEPTION">
    <category-title>exception <ref>pytgcalls.exceptions.<sb>PyTgCallsAlreadyRunning</sb></ref></category-title>
    <subtext><text>This error occurs when attempting to start a client that is already running.</text></subtext>
  </option>

  <option id="RTMP_EXCEPTION">
    <category-title>exception <ref>ntgcalls.<sb>RTMPNeeded</sb></ref></category-title>
    <subtext><text>This error occurs when attempting to use NTgCalls to enter an RTMP stream.</text></subtext>
  </option>

  <option id="SMALL_BUFF_EXCEPTION">
    <category-title><ref><sb><shi language="c">#NTG_ERR_TOO_SMALL</shi></sb></ref> <shi>-3</shi></category-title>
    <subtext>
      <text>
        The provided buffer is too small to store the parameters.
        You should allocate a larger buffer and try again.
      </text>
    </subtext>
  </option>

  <option id="CRYPTO_ERROR_C">
    <category-title><ref><sb><shi language="c">#NTG_CRYPTO_ERROR</shi></sb></ref> <shi>-102</shi></category-title>
    <subtext><config id="CRYPTO_ERROR_DESC"/></subtext>
  </option>

  <option id="INVALID_TRANSPORT_C">
    <category-title><ref><sb><shi language="c">#NTG_INVALID_TRANSPORT</shi></sb></ref> <shi>-301</shi></category-title>
    <subtext><text>The specified transport is invalid.</text></subtext>
  </option>

  <option id="CRYPTO_ERROR">
    <category-title>exception <ref>ntgcalls.<sb>CryptoError</sb></ref></category-title>
    <subtext><config id="CRYPTO_ERROR_DESC"/></subtext>
  </option>

  <option id="P2P_CONN_ERROR">
    <category-title>exception <ref>ntgcalls.<sb>ConnectionError</sb></ref></category-title>
    <subtext><text>A connection with the specified ID is already established or does not exist.</text></subtext>
  </option>

  <option id="CONN_ALREADY_EXISTS_C">
    <category-title><ref><sb><shi language="c">#NTG_CONNECTION_ALREADY_EXISTS</shi></sb></ref> <shi>-100</shi></category-title>
    <subtext><text>A connection with the specified ID already exists.</text></subtext>
  </option>
  <!--end exceptions-->

  <!--descriptions-->
  <option id="CHANGE_STREAM_DESC">
    <text>This method allows changing the streaming file in a Group Call.</text>
  </option>

  <option id="CHANGE_STREAM_DESC_2">
    <text>Change the streaming file.</text>
  </option>

  <option id="TIME_DESC">
    <text>This method allows getting the played time of the stream.</text>
  </option>

  <option id="TIME_DESC_2">
    <text>Get the played time of the stream</text>
  </option>

  <option id="LIST_CALLS_DESC">
    <subtext><text>Get a list of all calls.</text></subtext>
  </option>

  <option id="AUDIO_CONFIG_DESC">
    <text>Stream’s Audio Configuration</text>
  </option>

  <option id="AUDIO_SAMPLE_DESC">
    <subtext><text>Audio sample rate (0-96000, max allowed by PCM16L).</text></subtext>
  </option>

  <option id="AUDIO_CHAN_DESC">
    <subtext><text>Audio channel count (1-2, max allowed by PCM16L).</text></subtext>
  </option>

  <option id="VIDEO_CONFIG_DESC">
    <text>Stream’s Video Configuration</text>
  </option>

  <option id="VIDEO_FPS_DESC">
    <subtext><text>Frames per second (FPS) for video playback.</text></subtext>
  </option>

  <option id="FILE_EXCEPTION_DESC">
    <subtext><text>The specified file does not exist.</text></subtext>
  </option>

  <option id="NO_GROUP_CALL_EXCEPTION_DESC">
    <subtext><text>This error occurs when attempting to access a group call that does not exist.</text></subtext>
  </option>

  <option id="ARG_AUDIO_PARAMS_DESC">
    <subtext>
      <text>
        Stream’s audio parameters.
      </text>
    </subtext>
  </option>

  <option id="ARG_VIDEO_PARAMS_DESC">
    <subtext>
      <text>
        Stream’s video parameters.
      </text>
    </subtext>
  </option>

  <option id="CONNECT_DESC">
    <text>
      This method allows connecting to Telegram Group Calls with the output params from Telegram method
      <a href="https://core.telegram.org/method/phone.joinGroupCall">JoinGroupCall</a>.
    </text>
  </option>

  <option id="CONNECT_DESC2">
    <text>Set connection params for WebRTC obtained from Telegram.</text>
  </option>

  <option id="CREATE_DESC">
    <text>This method allows getting connection params for Telegram WebRTC connection.</text>
  </option>

  <option id="CREATE_DESC2">
    <text>Get connection params for Telegram.</text>
  </option>

  <option id="STOP_DESC">
    <text>This method allow stopping a WebRTC connection.</text>
  </option>

  <option id="STOP_DESC2">
    <text>Stop a WebRTC connection.</text>
  </option>

  <option id="MUTE_DESC">
    <text>This method allows you to mute the WebRTC stream.</text>
  </option>

  <option id="MUTE_DESC2">
    <text>Mute the WebRTC stream.</text>
  </option>

  <option id="UNMUTE_DESC">
    <text>This method allows you to unmute the WebRTC stream.</text>
  </option>

  <option id="UNMUTE_DESC2">
    <text>UnMute the WebRTC stream.</text>
  </option>

  <option id="PAUSE_DESC">
    <text>This method allows you to pause the WebRTC stream.</text>
  </option>

  <option id="PAUSE_DESC2">
    <text>Pause the WebRTC stream.</text>
  </option>

  <option id="RESUME_DESC">
    <text>This method allows you to resume the WebRTC stream.</text>
  </option>

  <option id="RESUME_DESC2">
    <text>Resume the WebRTC stream.</text>
  </option>

  <option id="CHAT_ID_DESC">
    <subtext><text>Unique identifier of a chat.</text></subtext>
  </option>

  <option id="TG_PARAMS_DESC">
    <subtext><text>Connection params obtained from Telegram.</text></subtext>
  </option>

  <option id="ARG_MEDIA_DESC">
    <subtext><text>Media parameters of the stream.</text></subtext>
  </option>

  <option id="MEDIA_SOURCE_DESC">
    <subtext><text>The input mode for audio or video.</text></subtext>
  </option>

  <option id="ARG_INPUT_MEDIA_DESC">
    <subtext><text>The input media source.</text></subtext>
  </option>

  <option id="VIDEO_WIDTH_DESC">
    <subtext><text>Video width in pixels.</text></subtext>
  </option>

  <option id="VIDEO_HEIGHT_DESC">
    <subtext><text>Video height in pixels.</text></subtext>
  </option>

  <option id="MEDIA_DESC">
    <text>Media Configuration for the Stream.</text>
  </option>

  <option id="MICROPHONE_DESC">
    <subtext><text>Microphone configuration for the stream.</text></subtext>
  </option>

  <option id="SPEAKER_DESC">
    <subtext><text>Speaker configuration for the stream.</text></subtext>
  </option>

  <option id="CAMERA_DESC">
    <subtext><text>Camera configuration for the stream.</text></subtext>
  </option>

  <option id="SCREEN_DESC">
    <subtext><text>Screen configuration for the stream.</text></subtext>
  </option>

  <option id="MEDIA_STATE_DESC">
    <text>GroupCall MTProto Configurations.</text>
  </option>

  <option id="MEDIA_MUTED_DESC">
    <subtext><text>Indicates whether the media stream is muted.</text></subtext>
  </option>

  <option id="MEDIA_PAUSED_DESC">
    <subtext><text>Indicates whether the video stream is paused.</text></subtext>
  </option>

  <option id="MEDIA_STOPPED_DESC">
    <subtext><text>Indicates whether the video stream is stopped.</text></subtext>
  </option>

  <option id="INPUT_MODE_DESC2">
    <text>Enumeration of input modes for audio and video streams.</text>
  </option>

  <option id="MODE_FILE_DESC">
    <subtext><text>Input mode using a file source.</text></subtext>
  </option>

  <option id="MODE_SHELL_DESC">
    <subtext><text>Input mode using a shell command.</text></subtext>
  </option>

  <option id="MODE_FFMPEG_DESC">
    <subtext><text>Input mode using FFmpeg.</text></subtext>
  </option>

  <option id="MODE_DEVICE_DESC">
    <subtext><text>Input mode using a device source.</text></subtext>
  </option>

  <option id="MODE_DESKTOP_DESC">
    <subtext><text>Input mode using a desktop source.</text></subtext>
  </option>

  <option id="MODE_EXTERNAL_DESC">
    <subtext><text>Input mode using an external source.</text></subtext>
  </option>

  <option id="STREAM_DEVICE_DESC">
    <text>Enumeration of stream device values.</text>
  </option>

  <option id="STREAM_DEVICE_DESC2">
    <subtext><text>Stream’s Device.</text></subtext>
  </option>

  <option id="STREAM_DEVICE_MICROPHONE_DESC">
    <subtext><text>Input mode using a microphone source.</text></subtext>
  </option>

  <option id="STREAM_DEVICE_SPEAKER_DESC">
    <subtext><text>Input mode using a speaker source.</text></subtext>
  </option>

  <option id="STREAM_DEVICE_CAMERA_DESC">
    <subtext><text>Input mode using a camera source.</text></subtext>
  </option>

  <option id="STREAM_DEVICE_SCREEN_DESC">
    <subtext><text>Input mode using a screen source.</text></subtext>
  </option>

  <option id="DEVICE_INFO_DESC">
    <text>Device Information.</text>
  </option>

  <option id="DEVICE_NAME_DESC">
    <subtext><text>Device name.</text></subtext>
  </option>

  <option id="DEVICE_METADATA_DESC">
    <subtext><text>Device metadata, such as the device ID.</text></subtext>
  </option>

  <option id="SSRC_GROUP_DESC">
    <text>SSRC Group with the SSRCs of the video stream and the semantics.</text>
  </option>

  <option id="SSRC_GROUP_SEMANTICS_DESC">
    <subtext><text>Enumeration of SSRC group semantics values.</text></subtext>
  </option>

  <option id="SSRC_GROUP_SSRCS_DESC">
    <subtext><text>SSRC Group.</text></subtext>
  </option>

  <option id="STREAM_STATUS_DESC">
    <text>Enumeration of stream status values.</text>
  </option>

  <option id="STATUS_PLAYING_DESC">
    <subtext><text>Indicates that the stream is currently playing.</text></subtext>
  </option>

  <option id="STATUS_PAUSED_DESC">
    <subtext><text>Indicates that the stream is currently paused.</text></subtext>
  </option>

  <option id="STATUS_IDLING_DESC">
    <subtext><text>Indicates that the stream is currently idling (neither playing nor paused).</text></subtext>
  </option>

  <option id="STREAM_TYPE_DESC">
    <text>Enumeration of stream type values.</text>
  </option>

  <option id="TYPE_AUDIO_DESC">
    <subtext><text>Indicates that the stream type is audio.</text></subtext>
  </option>

  <option id="TYPE_VIDEO_DESC">
    <subtext><text>Indicates that the stream type is video.</text></subtext>
  </option>

  <option id="CALLBACK_END_DESC">
    <text>
      Callback for handling when a stream playback ends. When a stream ends, this callback will be triggered.
    </text>
  </option>

  <option id="CALLBACK_UPGRADE_DESC">
    <text>
      Callback for handling when is needed to update GroupCall MTProto Configurations.
    </text>
  </option>

  <option id="CALLBACK_CONN_CHANGE_DESC">
    <text>
      Callback to listen for when the WebRTC connection has changed his state.
    </text>
  </option>

  <option id="CALLBACK_SIGNALING_DESC">
    <text>
      Callback for handling when a signaling message is received.
    </text>
  </option>

  <option id="CALLBACK_FRAMES_DESC">
    <text>
      Callback for handling when a group of frames is received.
    </text>
  </option>

  <option id="CALLBACK_REMOTE_SOURCE_DESC">
    <text>
      Callback for handling when the remote source changes.
    </text>
  </option>

  <option id="GET_STATE_DESC">
    <text>
      This method allows retrieving GroupCall MTProto Configurations for
      <a href="https://core.telegram.org/method/phone.editGroupCallParticipant">EditGroupCallParticipant</a>.
    </text>
  </option>

  <option id="GET_STATE_DESC2">
    <text>
      Retrieve GroupCall MTProto Configurations.
    </text>
  </option>

  <option id="STREAM_STATUS_DESC2">
    <subtext><text>Stream’s Status.</text></subtext>
  </option>

  <option id="BUG_FIX_CHANGELOGS">
    <item><text><b>Bug Fixes:</b> Addressed various bugs for a more stable experience.</text></item>
  </option>

  <option id="CREATE_P2P_DESC">
    <text>
      This method allows creating a Private Call connection that can be used to exchange keys and connect
    </text>
  </option>

  <option id="CREATE_P2P_DESC2">
    <text>Create a connection for a Private Call.</text>
  </option>

  <option id="INIT_EXCHANGE_DESC">
    <text>
      This method allows initializing a Private Call connection that can be used to exchange keys and connect with the output params from
      <a href="https://core.telegram.org/method/messages.getDhConfig">GetDhConfig</a> and <a href="https://core.telegram.org/constructor/phoneCallRequested">PhoneCallRequested</a> when is an incoming call
      and then use the output params for <a href="https://core.telegram.org/method/phone.acceptCall">AcceptCall</a> (When is an incoming call) or <a href="https://core.telegram.org/method/phone.requestCall">RequestCall</a> with <a href="https://core.telegram.org/constructor/phoneCallProtocol">Protocol</a>.
    </text>
  </option>

  <option id="INIT_EXCHANGE_DESC2">
    <text>Initialize a connection for a Private Call.</text>
  </option>

  <option id="EXCHANGE_KEYS_DESC">
    <text>
      This method allows exchanging keys for a Private Call connection with the output params from
      <a href="https://core.telegram.org/constructor/phoneCallAccepted">PhoneCallAccepted</a> when is an outgoing call or <a href="https://core.telegram.org/constructor/phoneCall">PhoneCall</a> when is an incoming call.
    </text>
  </option>

  <option id="EXCHANGE_KEYS_DESC2">
    <text>Exchange keys for a Private Call connection.</text>
  </option>

  <option id="DH_CONFIG_DESC">
    <text>Diffie-Hellman configuration for key exchange.</text>
  </option>

  <option id="G_DESC">
    <subtext><text>New value prime, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a>.</text></subtext>
  </option>

  <option id="P_DESC">
    <subtext><text>New value primitive root, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a>.</text></subtext>
  </option>

  <option id="R_DESC">
    <subtext><text>Random sequence of bytes of assigned length.</text></subtext>
  </option>

  <option id="G_A_HASH_DESC">
    <subtext><text>Parameter for key exchange (Only when is incoming call).</text></subtext>
  </option>

  <option id="G_A_OR_B_DESC">
    <subtext><text>Parameter for key exchange.</text></subtext>
  </option>

  <option id="FINGERPRINT_DESC">
    <subtext><text>Fingerprint for the connection (Optional when is an outgoing call).</text></subtext>
  </option>

  <option id="KEY_FINGERPRINT_DESC">
    <text>Fingerprint for the connection.</text>
  </option>

  <option id="AUTH_PARAMS_DESC">
    <text>Authentication parameters for the connection.</text>
  </option>

  <option id="CONNECT_P2P_DESC">
    <text>
      This method allows connecting to a Private Call with the output params from Telegram method
      <a href="https://core.telegram.org/method/phone.confirmCall">ConfirmCall</a> when is an outgoing call or <a href="https://core.telegram.org/constructor/phoneCall">PhoneCall</a> when is an incoming call.
    </text>
  </option>

  <option id="CONNECT_P2P_DESC2">
    <text>Set connection params for a Private Call obtained from Telegram.</text>
  </option>

  <option id="RTC_SERVERS_DESC">
    <subtext><text>List of endpoints the user can connect to exchange call data.</text></subtext>
  </option>

  <option id="RTC_SERVER_DESC">
    <text>Identifies an endpoint that can be used to connect to the other user in a phone call.</text>
  </option>

  <option id="GET_PROTOCOL_DESC">
    <text>
      This method allows getting the protocol for a Private Call connection with the output params for Telegram constructor
      <a href="https://core.telegram.org/constructor/phoneCallProtocol">PhoneCallProtocol</a>.
    </text>
  </option>

  <option id="GET_PROTOCOL_DESC2">
    <text>Get the protocol for a Private Call connection.</text>
  </option>

  <option id="GET_MEDIA_DEVICES_DESC">
    <text>
      This method allows getting all the available media devices, such as microphones and cameras.
    </text>
  </option>

  <option id="GET_MEDIA_DEVICES_DESC2">
    <text>Get all the available media devices.</text>
  </option>

  <option id="ENABLE_GLIB_LOOP_DESC">
    <text>Enable the GLib main loop to allow the library to use it for PipeWire on OSes that uses Wayland.</text>
  </option>

  <option id="ENABLE_GLIB_LOOP_DESC2">
    <text>Enable the GLib main loop.</text>
  </option>

  <option id="ENABLE_OR_DISABLE_GLIB_DESC">
    <subtext><text>Enable or disable the GLib main loop.</text></subtext>
  </option>

  <option id="ENABLE_H264_ENCODER_DESC">
    <text>Enable the H264 encoder for video streaming.</text>
  </option>

  <option id="ENABLE_H264_ENCODER_DESC2">
    <text>Enable the H264 encoder.</text>
  </option>

  <option id="ENABLE_OR_DISABLE_H264_DESC">
    <subtext><text>Enable or disable the H264 encoder.</text></subtext>
  </option>

  <option id="IS_PRESENTATION_DESC">
    <subtext><text>Whether the connection is for a presentation.</text></subtext>
  </option>

  <option id="INIT_PRESENTATION_DESC">
    <text>
      This method allows initializing a presentation connection, which is a connection for sharing the screen.
    </text>
  </option>

  <option id="INIT_PRESENTATION_DESC2">
    <text>Initialize a presentation connection.</text>
  </option>

  <option id="ADD_INCOMING_VIDEO_DESC">
    <text>
      This method allows to notify the library that an incoming video stream is available.
    </text>
  </option>

  <option id="ADD_INCOMING_VIDEO_DESC2">
      <text>Notify the library that an incoming video stream is available.</text>
  </option>

  <option id="ENDPOINT_DESC">
    <subtext><text>Endpoint ID</text></subtext>
  </option>

  <option id="SSRC_GROUPS_DESC">
    <subtext><text>SSRC groups for the video stream.</text></subtext>
  </option>

  <option id="REMOVE_INCOMING_VIDEO_DESC">
    <text>
      This method allows to notify the library that an incoming video stream is no longer available.
    </text>
  </option>

  <option id="REMOVE_INCOMING_VIDEO_DESC2">
    <text>Notify the library that an incoming video stream is no longer available.</text>
  </option>

  <option id="STOP_PRESENTATION_DESC">
    <text>
      This method allows stopping the presentation connection.
    </text>
  </option>

  <option id="STOP_PRESENTATION_DESC2">
    <text>Stop the presentation connection.</text>
  </option>

  <option id="STREAM_MODE">
    <category-title><ref><sb>direction</sb></ref>: <docs-ref link="/NTgCalls/Available Enums/StreamMode">ntgcalls.StreamMode</docs-ref></category-title>
    <config id="STREAM_MODE_DESC"/>
  </option>

  <option id="NTG_STREAM_MODE">
    <category-title><docs-ref link="/NTgCalls/Available Enums/ntg_stream_mode_enum">ntg_stream_mode_enum</docs-ref> <ref><sb>streamMode</sb></ref></category-title>
    <config id="STREAM_MODE_DESC"/>
  </option>

  <option id="SEND_EXTERNAL_FRAME_DESC">
    <text>
      This method allows sending an external video frame to the WebRTC connection.
    </text>
  </option>

  <option id="SEND_EXTERNAL_FRAME_DESC2">
    <text>Send an external video frame to the WebRTC connection.</text>
  </option>

  <option id="SKIP_EXCHANGE_DESC">
    <text>
      This method allows skipping the exchange of keys for a Private Call connection by using the encryption key already exchanged.
    </text>
  </option>

  <option id="SKIP_EXCHANGE_DESC2">
    <text>Skip the exchange of keys for a Private Call connection.</text>
  </option>

  <option id="ENCRYPTION_KEY_DESC">
    <subtext><text>Encryption key for the connection.</text></subtext>
  </option>

  <option id="IS_OUTGOING_DESC">
    <subtext><text>Whether the call is outgoing.</text></subtext>
  </option>

  <option id="NOTE_CALLBACK">
    <alert type="note">
      When registering callbacks, keep in mind that each registration replaces the previously set callback.
    </alert>
  </option>

  <option id="STREAM_MODE_DESC">
    <subtext><text>Stream direction for the stream.</text></subtext>
  </option>

  <option id="MODE_CAPTURE_DESC">
    <subtext><text>Direction for sending the stream.</text></subtext>
  </option>

  <option id="MODE_PLAYBACK_DESC">
    <subtext><text>Direction for receiving the stream.</text></subtext>
  </option>

  <option id="CONNECTION_KIND_DESC">
    <text>Kind of connection.</text>
  </option>

  <option id="CONNECTION_KIND_NORMAL_DESC">
    <subtext><text>Normal connection for the camera and microphone.</text></subtext>
  </option>

  <option id="CONNECTION_KIND_PRESENTATION_DESC">
    <subtext><text>Presentation connection for sharing the screen and system audio.</text></subtext>
  </option>

  <option id="FRAME_DESC">
    <text>Frame descriptor for the media stream.</text>
  </option>

  <option id="SSRC_DESC">
    <subtext><text>SSRC of the frame.</text></subtext>
  </option>

  <option id="FRAME_DATA_DESC">
    <text>Frame data for the media stream.</text>
  </option>

  <option id="FRAME_DATA_ABSOLUTE_CAPTURE_TIMESTAMP_MS_DESC">
    <subtext><text>Absolute capture timestamp in milliseconds.</text></subtext>
  </option>

  <option id="FRAME_DATA_ROTATION_DESC">
    <subtext><text>Rotation of the video frame.</text></subtext>
  </option>

  <option id="FRAME_DATA_WIDTH_DESC">
    <subtext><text>Width of the video frame.</text></subtext>
  </option>

  <option id="FRAME_DATA_HEIGHT_DESC">
    <subtext><text>Height of the video frame.</text></subtext>
  </option>

  <option id="MEDIA_DEVICES_DESC">
    <text>Media devices available for streaming.</text>
  </option>

  <option id="MICROPHONE_DEVICES_DESC">
    <subtext><text>List of available microphones.</text></subtext>
  </option>

  <option id="SPEAKER_DEVICES_DESC">
    <subtext><text>List of available speakers.</text></subtext>
  </option>

  <option id="CAMERA_DEVICES_DESC">
    <subtext><text>List of available cameras.</text></subtext>
  </option>

  <option id="SCREEN_DEVICES_DESC">
    <subtext><text>List of available screens.</text></subtext>
  </option>

  <option id="CALL_INFO_DESC">
    <text>Call Descriptor for a Group Call or Private Call.</text>
  </option>

  <option id="PLAYBACK_DESC">
    <subtext><text>Playback stream status.</text></subtext>
  </option>

  <option id="CAPTURE_DESC">
    <subtext><text>Capture stream status.</text></subtext>
  </option>

  <option id="NETWORK_DESC">
   <text>Network status for the call.</text>
  </option>

  <option id="CONNECTION_STATE_DESC2">
    <subtext><text>Connection state for the call.</text></subtext>
  </option>

  <option id="REMOTE_SOURCE_DESC">
    <text>Remote source for the call.</text>
  </option>

  <option id="CONNECTION_ALREADY_EXCHANGE_DESC">
    <subtext><text>When the exchange was already initialized.</text></subtext>
  </option>

  <option id="CONNECTION_ALREADY_ESTABLISHED_DESC">
    <subtext><text>When the connection was already established or the key already exchanged.</text></subtext>
  </option>

  <option id="CALL_CONFIG_DESC">
    <category-title><ref>config</ref>: Optional[Union[<docs-ref link="/PyTgCalls/Advanced Types/CallConfig">CallConfig</docs-ref>, <docs-ref link="/PyTgCalls/Advanced Types/GroupCallConfig">GroupCallConfig</docs-ref>]]</category-title>
    <subtext><text>Additional configuration for the call.</text></subtext>
  </option>

  <option id="PROTOCOL_DESC">
    <text>Protocol for a Private Call connection.</text>
  </option>

  <option id="MIN_LAYER_DESC">
    <subtext><text>Minimum layer for remote connection.</text></subtext>
  </option>

  <option id="MAX_LAYER_DESC">
    <subtext><text>Maximum layer for remote connection.</text></subtext>
  </option>

  <option id="UDP_P2P_DESC">
    <subtext><text>Whether to allow P2P connection to the other participant.</text></subtext>
  </option>

  <option id="UDP_REFLECTOR_DESC">
    <subtext><text>Whether to allow connection to the other participants through the reflector servers.</text></subtext>
  </option>

  <option id="LIBRARY_VERSIONS_DESC">
    <subtext>
      <text>
        When using <a href="https://core.telegram.org/method/phone.requestCall">RequestCall</a> and <a href="https://core.telegram.org/method/phone.acceptCall">AcceptCall</a>,
        specify all library versions supported by the client.
        The server will merge and choose the best library version supported by both peers, returning only the best
        value in the result of the call's <a href="https://core.telegram.org/method/phone.acceptCall">AcceptCall</a> and in the <a href="https://core.telegram.org/constructor/phoneCallAccepted">PhoneCallAccepted</a> update received by the caller.
      </text>
    </subtext>
  </option>

  <option id="DEVICE_DESC">
    <subtext><text>Device Kind</text></subtext>
  </option>

  <option id="FRAME_BUFFER_DESC">
    <subtext><text>Frame buffer</text></subtext>
  </option>

  <option id="FRAME_DATA_DESC">
    <subtext><text>Frame descriptor</text></subtext>
  </option>

  <option id="P2P_ALLOWED_DESC">
    <subtext><text>Whether to allow P2P connection to the other participant.</text></subtext>
  </option>

  <option id="SEND_SIGNALING_DATA_DESC">
    <text>
      This method allows sending signaling data to the WebRTC connection.
    </text>
  </option>

  <option id="SEND_SIGNALING_DATA_DESC2">
    <text>Send signaling data to the WebRTC connection.</text>
  </option>

  <option id="SIGNALING_DATA_DESC">
    <text>Signaling payload.</text>
  </option>

  <option id="CPU_USAGE_DESC">
    <text>Get an estimate of the CPU usage of the current process.</text>
  </option>

  <option id="CPU_USAGE_DESC2">
      <text>Get the CPU usage of the current process.</text>
  </option>

  <option id="CPU_USAGE_DESC3">
    <text>Buffer to store the CPU usage.</text>
  </option>

  <option id="REGISTER_LOGGER_DESC">
    <text>Register a logger for the library, this logger will be used for all instances.</text>
  </option>

  <option id="LOGGER_DESC">
    <text>Callback for logging messages.</text>
  </option>

  <option id="LOG_MESSAGE_STRUCT_DESC">
    <text>Log message structure.</text>
  </option>

  <option id="LOG_LEVEL_DESC">
    <text>Log level.</text>
  </option>

  <option id="LOG_SOURCE_DESC">
    <text>Log source.</text>
  </option>

  <option id="LOG_FILE_DESC">
    <text>File name where the log was generated.</text>
  </option>

  <option id="LOG_LINE_DESC">
    <text>Line number where the log was generated.</text>
  </option>

  <option id="LOG_MESSAGE_DESC">
    <text>Log message.</text>
  </option>

  <option id="NTG_LOG_DEBUG_DESC">
    <text>Debug log level.</text>
  </option>

  <option id="LOG_LEVEL_INFO_DESC">
    <text>Info log level.</text>
  </option>

  <option id="LOG_LEVEL_WARNING_DESC">
    <text>Warning log level.</text>

  </option>

  <option id="LOG_LEVEL_ERROR_DESC">
    <text>Error log level.</text>
  </option>

  <option id="LOG_LEVEL_UNKNOWN_DESC">
    <text>Unknown log level.</text>
  </option>

  <option id="NTG_LOG_WEBRTC_DESC">
    <text>WebRTC log level.</text>
  </option>

  <option id="NTG_LOG_SELF_DESC">
    <text>NTgCalls log level.</text>
  </option>

  <option id="CRYPTO_ERROR_DESC">
    <text>An error occurred while encrypting or decrypting data.</text>
  </option>

  <option id="SIGNALING_ERROR_DESC">
    <text>An error occurred during signaling</text>
  </option>

  <option id="SIGNALING_UNSUPPORTED_DESC">
    <text>The current protocol is not supported by the signaling server.</text>
  </option>

  <option id="MISSING_FINGERPRINT_DESC">
    <text>The fingerprint is missing (Happens only on outgoing calls)</text>
  </option>

  <option id="RTC_ID_DESC">
    <subtext><text>Endpoint ID</text></subtext>
  </option>

  <option id="RTC_IPV4_DESC">
    <subtext><text>IPv4 address of endpoint</text></subtext>
  </option>

  <option id="RTC_IPV6_DESC">
    <subtext><text>IPv6 address of endpoint</text></subtext>
  </option>

  <option id="RTC_USERNAME_DESC">
    <subtext><text>Username of endpoint</text></subtext>
  </option>

  <option id="RTC_PASSWORD_DESC">
    <subtext><text>Password of endpoint</text></subtext>
  </option>

  <option id="RTC_PORT_DESC">
    <subtext><text>Port ID</text></subtext>
  </option>

  <option id="RTC_TURN_DESC">
    <subtext><text>Whether the endpoint is a TURN server</text></subtext>
  </option>

  <option id="RTC_STUN_DESC">
    <subtext><text>Whether the endpoint is a STUN server</text></subtext>
  </option>

  <option id="RTC_TCP_DESC">
    <subtext><text>Whether TCP should be used</text></subtext>
  </option>

  <option id="RTC_PEER_TAG_DESC">
    <subtext><text>Our peer tag</text></subtext>
  </option>

  <option id="CONNECTION_STATE_DESC">
    <text>Enumeration of connection state values.</text>
  </option>

  <option id="NTG_STATE_CONNECTING_DESC">
    <subtext><text>Indicates that the connection is in the process of being established.</text></subtext>
  </option>

  <option id="NTG_STATE_CONNECTED_DESC">
    <subtext><text>Indicates that the connection has been established.</text></subtext>
  </option>

  <option id="NTG_STATE_TIMEOUT_DESC">
    <subtext><text>Indicates that the connection has timed out.</text></subtext>
  </option>

  <option id="NTG_STATE_FAILED_DESC">
    <subtext><text>Indicates that the connection has failed.</text></subtext>
  </option>

  <option id="NTG_STATE_CLOSED_DESC">
    <subtext><text>Indicates that the connection has been closed.</text></subtext>
  </option>
  <!--end descriptions-->

  <!--parameters-->
  <option id="ARG_CHAT_ID">
    <category-title><ref>chat_id</ref>: Union[<shi>int</shi>, <shi>str</shi>]</category-title>
    <subtext><text>Can be direct id or a username</text></subtext>
  </option>

  <option id="ARG_UNION_PEER">
    Union[<a href="https://docs.pyrogram.org/telegram/base/input-peer">pyrogram.InputPeer</a>, <a href="https://tl.telethon.dev/types/input_peer.html">telethon.InputPeer</a>, <a href="https://hydrogram.amanoteam.com/en/latest/telegram/base/input-peer.html">hydrogram.InputPeer</a>]
  </option>

  <option id="RET_INT_ID">
    <category-title><ref><sb>chat_id</sb></ref> <shi>-> int</shi></category-title>
    <config id="CHAT_ID_DESC"/>
  </option>

  <option id="ARG_INT_ID">
    <category-title><ref><sb>chat_id</sb></ref>: <shi>int</shi></category-title>
    <config id="CHAT_ID_DESC"/>
  </option>

  <option id="ARG_C_CHAT_ID">
    <category-title><shi language="c">int64_t</shi> <ref><sb>chatID</sb></ref></category-title>
    <config id="CHAT_ID_DESC"/>
  </option>

  <option id="ARG_C_UID">
    <category-title><shi language="c">uint32_t</shi> <ref><sb>uid</sb></ref></category-title>
    <subtext><text>The unique identifier for the NTgCalls instance.</text></subtext>
  </option>

  <option id="ARG_PARTICIPANT">
    <category-title><ref><sb>participant</sb></ref> <shi>-></shi> <docs-ref link="/PyTgCalls/Advanced Types/GroupCallParticipant">pytgcalls.GroupCallParticipant</docs-ref></category-title>
    <subtext><text>Info about a group call participant.</text></subtext>
  </option>

  <option id="ARG_AUDIO_PARAMS">
    <category-title><ref>audio_parameters</ref>: Optional[<docs-ref link="/PyTgCalls/Stream Descriptors/AudioParameters">pytgcalls.types.raw.AudioParameters</docs-ref>]</category-title>
    <config id="ARG_AUDIO_PARAMS_DESC"/>
  </option>

  <option id="ARG_AUDIO_PARAMSv2">
    <category-title><ref>audio_parameters</ref>: Optional[Union[<docs-ref link="/PyTgCalls/Stream Descriptors/AudioParameters">pytgcalls.types.raw.AudioParameters</docs-ref>, <docs-ref link="/PyTgCalls/Available Enums/AudioQuality">pytgcalls.types.AudioQuality</docs-ref>]]</category-title>
    <config id="ARG_AUDIO_PARAMS_DESC"/>
  </option>

  <option id="ARG_VIDEO_PARAMS">
    <category-title><ref>video_parameters</ref>: Optional[<docs-ref link="/PyTgCalls/Stream Descriptors/VideoParameters">pytgcalls.types.raw.VideoParameters</docs-ref>]</category-title>
    <config id="ARG_VIDEO_PARAMS_DESC"/>
  </option>

  <option id="ARG_VIDEO_PARAMSv2">
    <category-title><ref>video_parameters</ref>: Optional[Union[<docs-ref link="/PyTgCalls/Stream Descriptors/VideoParameters">pytgcalls.types.raw.VideoParameters</docs-ref>, <docs-ref link="/PyTgCalls/Available Enums/VideoQuality">pytgcalls.types.VideoQuality</docs-ref>]]</category-title>
    <config id="ARG_VIDEO_PARAMS_DESC"/>
  </option>

  <option id="ARG_FFMPEG_PARAMS">
    <config id="ARG_HTTP_PARAMS"/>

    <category-title><ref>additional_ffmpeg_parameters</ref>: Optional[<shi>str</shi>]</category-title>
    <subtext><text>FFmpeg additional parameters.</text></subtext>
  </option>

  <option id="ARG_HTTP_PARAMS">
    <category-title><ref>headers</ref>: Optional[<shi>dict</shi>[<shi>str</shi>, <shi>str</shi>]]</category-title>
    <subtext><text>HTTP connection’s headers.</text></subtext>
  </option>

  <option id="ARG_STREAM_PARAMS">
    <category-title><ref><sb>media</sb></ref>: <docs-ref link="/NTgCalls/Available Types/MediaDescription">ntgcalls.MediaDescription</docs-ref></category-title>
    <config id="ARG_MEDIA_DESC"/>
  </option>

  <option id="ARG_VIDEO_CONFIG">
    <category-title><ref>width</ref>: <shi>int</shi></category-title>
    <config id="VIDEO_WIDTH_DESC"/>

    <category-title><ref>height</ref>: <shi>int</shi></category-title>
    <config id="VIDEO_HEIGHT_DESC"/>
  </option>

  <option id="ARG_MEDIA_SOURCE">
    <category-title><ref>input_mode</ref>: <docs-ref link="/NTgCalls/Available Enums/MediaSource">ntgcalls.MediaSource</docs-ref></category-title>
    <config id="MEDIA_SOURCE_DESC"/>
  </option>

  <option id="ARG_C_MEDIA_SOURCE">
    <category-title><docs-ref link="/NTgCalls/Available Enums/ntg_media_source_enum">ntg_media_source_enum</docs-ref> <ref>mediaSource</ref></category-title>
    <config id="MEDIA_SOURCE_DESC"/>
  </option>

  <option id="ARG_MEDIA_C">
    <category-title><docs-ref link="/NTgCalls/Available Structs/ntg_media_description_struct">ntg_media_description_struct</docs-ref> <ref><sb>desc</sb></ref></category-title>
    <config id="ARG_MEDIA_DESC"/>
  </option>

  <option id="ARG_BUF_SIZE">
    <category-title><shi language="c">int</shi> <ref><sb>size</sb></ref></category-title>
    <subtext><text>The size of the provided buffer.</text></subtext>
  </option>

  <option id="ARG_INPUT_MEDIA">
    <category-title><ref>input</ref>: <shi>str</shi></category-title>
    <config id="ARG_INPUT_MEDIA_DESC"/>
  </option>

  <option id="ARG_C_INPUT_MEDIA">
    <category-title><shi language="c">char*</shi> <ref>input</ref></category-title>
    <config id="ARG_INPUT_MEDIA_DESC"/>
  </option>

  <option id="ARG_AUDIO_PATH">
    <category-title><ref>audio_path</ref>: <shi>str</shi></category-title>
    <subtext><text>The audio file path.</text></subtext>
  </option>

  <option id="ARG_AUDIO_DEVICE">
    <category-title><ref>audio_info</ref>: <code>pytgcalls.DeviceInfo</code></category-title>
    <subtext><text>The audio media device.</text></subtext>
  </option>

  <option id="ARG_SCREEN_DEVICE">
    <category-title><ref>screen_info</ref>: <code>pytgcalls.ScreenInfo</code></category-title>
    <subtext><text>The video media device.</text></subtext>
  </option>

  <option id="ARG_CUSTOM_DATA">
    <category-title><shi language="c">void*</shi> <ref><sb>userData</sb></ref></category-title>
    <subtext><text>Custom data that can be passed to the callback function.</text></subtext>
  </option>

  <option id="ARG_ASYNC_STRUCT">
    <category-title><docs-ref link="/NTgCalls/Using Async">ntg_async_struct</docs-ref><shi language="c">*</shi> <ref><sb>future</sb></ref></category-title>
    <subtext><text>The <code>ntg_async_struct</code> instance that will be used to track the async operation.</text></subtext>
  </option>

  <option id="ARG_MEDIA">
    <category-title><docs-ref link="/NTgCalls/Available Structs/ntg_media_description_struct">ntg_media_description_struct</docs-ref> <ref>desc</ref></category-title>
    <config id="ARG_MEDIA_DESC"/>
  </option>
  <!--end parameters-->

  <homepage-config>
    <pres-items>
      <file title="pytgcalls.py">
        <syntax-highlight>
            from pytgcalls import PyTgCalls
            from pytgcalls import idle
            ...
            app = PyTgCalls(client)
            app.start()
            app.play(
              -1001185324811,
              'http://docs.evostream.com/sample_content/assets/sintel1m720p.mp4',
            )
            idle()
        </syntax-highlight>
      </file>
      <file title="ntgcalls.c">
        <syntax-highlight language="c">
            #include &lt;stdint.h&gt;
            #include "ntgcalls.h"

            int main() {
              uint32_t uid = ntg_init();

              int64_t chatID = ...; // Obtain the chat ID
              char* params = ...;  // Obtain connection parameters

              int result = ntg_connect(uid, chatID, params, false);
              if (result == 0) {
                  // Successfully connected to the WebRTC
                  ...
              } else {
                  printf("Failed to connect: %d\n", result);
              }
              ...
              return 0;
            }
        </syntax-highlight>
      </file>
      <file title="ntgcalls.go">
        <syntax-highlight language="go">
            package main

            //#cgo LDFLAGS: -L . -lntgcalls -Wl,-rpath=./
            import "C"
            import (
              "fmt"
              ...
              "example/ntgcalls"
            )

            func main() {
              client := ntgcalls.NTgCalls()
              defer client.Free()

              chatID := ... // Obtain the chat ID
              params := ... // Obtain connection parameters

              err := ntgcalls.Connect(uid, chatID, params, false)
              if err == nil {
                  // Successfully connected to the WebRTC
                  ...
              } else {
                  fmt.Printf("Failed to connect: %d\n", err)
              }
              ...
            }
        </syntax-highlight>
      </file>
      <file title="NTgCalls.java">
        <syntax-highlight language="java">
            import io.github.pytgcalls.NTgCalls;
            import android.util.Log;
            ...

            public static void main(String[] args) {
              var client = new NTgCalls();
              ...
              long chatID = ...; // Obtain the chat ID
              String params = ...; // Obtain connection parameters
              try {
                  client.connect(chatID, params, false);
                  // Successfully connected to the WebRTC
                  ...
              } catch (Exception e) {
                  Log.e("NTgCalls", "Failed to connect: " + e.getMessage());
              }
              ...
            }
        </syntax-highlight>
      </file>
    </pres-items>
    <numeric-pres-points>
      <item
        title="20 MLN+"
        description="Total downloads from PyPi or Github"
      />
      <item
        title="30,000+"
        description="Projects that have adopted PyTgCalls or NTgCalls"
        origin="Available NTgCalls since 2023"
      />
      <item
        title="78,9%"
        description="Developer preference for PyTgCalls"
        origin="Based on Github stats 2024"
      />
    </numeric-pres-points>
    <citation>
      <value>
        Our mission is to make Telegram calls effortless for developers of all backgrounds, from complex class to seamless integration.<br/>
        No prior WebRTC or C++ experience is required.
      </value>
    </citation>
    <team>
      <member owner="true">
        <name>Laky</name>
        <role>DevOps Engineer, Software Architect</role>
        <github-username>Laky-64</github-username>
        <telegram-username>Laky64</telegram-username>
      </member>
      <member>
        <name>Giovanni</name>
        <role>Senior UI/UX designer, Documenter</role>
        <github-username>kuogi</github-username>
        <telegram-username>kuogi</telegram-username>
      </member>
      <member>
        <name>Avrumy</name>
        <role>Mid-level NodeJS Developer</role>
        <github-username>vrumger</github-username>
        <telegram-username>twitface</telegram-username>
      </member>
      <member>
        <name>Turi</name>
        <role>Junior Python Developer</role>
        <github-username>TuriOG</github-username>
        <telegram-username>TuriOG</telegram-username>
      </member>
      <member>
        <name>dogghi no</name>
        <role>Junior DevOps, Tester</role>
        <github-username>doggyhaha</github-username>
        <telegram-username>cagavo</telegram-username>
      </member>
      <member>
        <name>Valerio</name>
        <role>Junior Go Developer, Tester</role>
        <github-username>tappo03</github-username>
        <telegram-username>tappo03</telegram-username>
      </member>
      <member>
        <name>Nick</name>
        <role>Tester</role>
        <github-username>null-nick</github-username>
        <telegram-username>GodsPro</telegram-username>
      </member>
      <member>
        <name>BranchScope</name>
        <role>Tester</role>
        <github-username>branchscope</github-username>
        <telegram-username>branchscope</telegram-username>
      </member>
      <member>
        <name>Jamil Md</name>
        <role>Copywriter</role>
        <github-username>SadLuffy</github-username>
        <telegram-username>SadLuffy</telegram-username>
      </member>
    </team>
    <footer-links>
      <contribution-link>https://github.com/pytgcalls/pytgcalls.github.io</contribution-link>
      <category title="Products">
        <link href="/PyTgCalls/Changelogs">Changelogs</link>
        <link href="https://github.com/pytgcalls/pytgcalls/">PyTgCalls</link>
        <link href="https://github.com/pytgcalls/ntgcalls/">NTgCalls</link>
      </category>
      <category title="Project links">
        <link href="https://github.com/pytgcalls/ntgcalls/issues/new/choose">Open a NTgCalls issue</link>
        <link href="https://github.com/pytgcalls/pytgcalls/issues/new/choose">Open a PyTgCalls issue</link>
        <link href="https://t.me/pytgcallschat">Ask to PyTgCalls Community</link>
      </category>
      <category title="Company">
        <link href="https://github.com/pytgcalls">Github Organization</link>
        <link href="https://github.com/pytgcalls/pytgcalls.github.io">Contribute to this site</link>
        <link href="https://t.me/pytgcallsnews">Newsletter</link>
      </category>
      <dsc>© 2024 • PyTgCalls Foundation by Vrumger &amp; Laky64</dsc>
    </footer-links>
  </homepage-config>

  <files-list id="NTgCalls" description="A Native Implementation of Telegram Calls in a seamless way." basepath="NTgCalls/" defaultfile="Quick Start.xml">
    <microtag>Introduction</microtag>
    <file>Quick Start.xml</file>
    <file>Build Guide.xml</file>

    <microtag>Python Api</microtag>
    <file>Client.xml</file>
    <file>Callbacks.xml</file>
    <group basepath="NTgCalls/Basic Methods/">
      <file>Connect.xml</file>
      <file>Connect P2P.xml</file>
      <file>Create Call.xml</file>
      <file>Create P2P Call.xml</file>
      <file>Exchange Keys.xml</file>
      <file>Init Exchange.xml</file>
      <file>Init Presentation.xml</file>
      <file>Skip Exchange.xml</file>
      <file>Stop.xml</file>
      <file>Stop Presentation.xml</file>
    </group>
    <group basepath="NTgCalls/Stream Methods/">
      <file>Mute.xml</file>
      <file>Pause.xml</file>
      <file>Resume.xml</file>
      <file>Set Stream Sources.xml</file>
      <file>Time.xml</file>
      <file>UnMute.xml</file>
    </group>
    <group basepath="NTgCalls/Advanced Methods/">
      <file>Add Incoming Video.xml</file>
      <file>Get State.xml</file>
      <file>Remove Incoming Video.xml</file>
      <file>Send External Frame.xml</file>
      <file>Send Signaling Data.xml</file>
    </group>
    <group basepath="NTgCalls/Available Types/">
      <file>AudioDescription.xml</file>
      <file>AuthParams.xml</file>
      <file>CallInfo.xml</file>
      <file>DeviceInfo.xml</file>
      <file>DhConfig.xml</file>
      <file>Frame.xml</file>
      <file>FrameData.xml</file>
      <file>MediaDescription.xml</file>
      <file>MediaDevices.xml</file>
      <file>MediaState.xml</file>
      <file>NetworkInfo.xml</file>
      <file>Protocol.xml</file>
      <file>RemoteSource.xml</file>
      <file>RTCServer.xml</file>
      <file>SsrcGroup.xml</file>
      <file>VideoDescription.xml</file>
    </group>
    <group basepath="NTgCalls/Available Enums/">
      <file>ConnectionKind.xml</file>
      <file>ConnectionState.xml</file>
      <file>MediaSource.xml</file>
      <file>StreamDevice.xml</file>
      <file>StreamMode.xml</file>
      <file>StreamStatus.xml</file>
      <file>StreamType.xml</file>
    </group>

    <microtag>C Api</microtag>
    <file>Getting Started.xml</file>
    <file>Callback Registration.xml</file>
    <file>Using Async.xml</file>
    <group basepath="NTgCalls/Basic Methods/">
      <file>ntg_connect.xml</file>
      <file>ntg_connect_p2p.xml</file>
      <file>ntg_create.xml</file>
      <file>ntg_create_p2p.xml</file>
      <file>ntg_exchange_keys.xml</file>
      <file>ntg_init_exchange.xml</file>
      <file>ntg_init_presentation.xml</file>
      <file>ntg_skip_exchange.xml</file>
      <file>ntg_stop.xml</file>
      <file>ntg_stop_presentation.xml</file>
    </group>
    <group basepath="NTgCalls/Stream Methods/">
      <file>ntg_mute.xml</file>
      <file>ntg_pause.xml</file>
      <file>ntg_resume.xml</file>
      <file>ntg_set_stream_sources.xml</file>
      <file>ntg_time.xml</file>
      <file>ntg_unmute.xml</file>
    </group>
    <group basepath="NTgCalls/Advanced Methods/">
      <file>ntg_add_incoming_video.xml</file>
      <file>ntg_calls.xml</file>
      <file>ntg_calls_count.xml</file>
      <file>ntg_enable_g_lib_loop.xml</file>
      <file>ntg_enable_h264_encoder.xml</file>
      <file>ntg_get_media_devices.xml</file>
      <file>ntg_get_protocol.xml</file>
      <file>ntg_get_state.xml</file>
      <file>ntg_remove_incoming_video.xml</file>
      <file>ntg_send_external_frame.xml</file>
      <file>ntg_send_signaling_data.xml</file>
    </group>
    <group basepath="NTgCalls/Available Structs/">
      <file>ntg_audio_description_struct.xml</file>
      <file>ntg_auth_params_struct.xml</file>
      <file>ntg_call_info_struct.xml</file>
      <file>ntg_device_info_struct.xml</file>
      <file>ntg_dh_config_struct.xml</file>
      <file>ntg_frame_data_struct.xml</file>
      <file>ntg_frame_struct.xml</file>
      <file>ntg_log_message_struct.xml</file>
      <file>ntg_media_description_struct.xml</file>
      <file>ntg_media_devices_struct.xml</file>
      <file>ntg_media_state_struct.xml</file>
      <file>ntg_network_info_struct.xml</file>
      <file>ntg_protocol_struct.xml</file>
      <file>ntg_remote_source_struct.xml</file>
      <file>ntg_rtc_server_struct.xml</file>
      <file>ntg_ssrc_group_struct.xml</file>
      <file>ntg_video_description_struct.xml</file>
    </group>
    <group basepath="NTgCalls/Available Enums/">
      <file>ntg_connection_kind_enum.xml</file>
      <file>ntg_connection_state_enum.xml</file>
      <file>ntg_log_level_enum.xml</file>
      <file>ntg_log_source_enum.xml</file>
      <file>ntg_media_source_enum.xml</file>
      <file>ntg_stream_device_enum.xml</file>
      <file>ntg_stream_mode_enum.xml</file>
      <file>ntg_stream_status_enum.xml</file>
      <file>ntg_stream_type_enum.xml</file>
    </group>
  </files-list>

  <files-list id="PyTgCalls" description="Async Python client API for the Telegram Calls" basepath="PyTgCalls/" defaultfile="Quick Start.xml">
    <microtag>Introduction</microtag>
    <file>Quick Start.xml</file>
    <file>Install Guide.xml</file>
    <file>Changelogs.xml</file>

    <microtag>Getting Started</microtag>
    <file>Calling Methods.xml</file>
    <file>Handling Updates.xml</file>
    <file>Examples.xml</file>

    <microtag>Api Reference</microtag>
    <file>Client.xml</file>
    <file>Custom Api.xml</file>
    <file>Media Devices.xml</file>
    <file>Decorators.xml</file>
    <file>Filters.xml</file>
    <file>Using Filters.xml</file>
    <file>Using Handlers.xml</file>

    <group basepath="PyTgCalls/Available Enums/">
      <file>AudioQuality.xml</file>
      <file>Call Status.xml</file>
      <file>Call Type.xml</file>
      <file>ChatUpdate Status.xml</file>
      <file>Device.xml</file>
      <file>Direction.xml</file>
      <file>ExternalMedia.xml</file>
      <file>GroupCallParticipant Action.xml</file>
      <file>MediaStream Flags.xml</file>
      <file>VideoQuality.xml</file>
    </group>

    <microtag>Methods</microtag>
    <group basepath="PyTgCalls/Basic Methods/">
      <file>Idle.xml</file>
      <file>Leave Call.xml</file>
      <file>Run.xml</file>
      <file>Start.xml</file>
    </group>

    <group basepath="PyTgCalls/Stream Methods/">
      <file>Mute.xml</file>
      <file>Pause.xml</file>
      <file>Play.xml</file>
      <file>Record.xml</file>
      <file>Time.xml</file>
      <file>Resume.xml</file>
      <file>UnMute.xml</file>
    </group>

    <group basepath="PyTgCalls/Advanced Methods/">
      <file>Change Volume Call.xml</file>
      <file>Get Participants.xml</file>
      <file>Send Frame.xml</file>
    </group>

    <microtag>Types</microtag>
    <group basepath="PyTgCalls/Stream Descriptors/">
      <file>AudioParameters.xml</file>
      <file>AudioStream.xml</file>
      <file>MediaStream.xml</file>
      <file>RecordStream.xml</file>
      <file>Stream.xml</file>
      <file>VideoParameters.xml</file>
      <file>VideoStream.xml</file>
    </group>

    <group basepath="PyTgCalls/Advanced Types/">
      <file>Call.xml</file>
      <file>CallConfig.xml</file>
      <file>ChatUpdate.xml</file>
      <file>Frame.xml</file>
      <file>Frame Info.xml</file>
      <file>GroupCallConfig.xml</file>
      <file>GroupCallParticipant.xml</file>
      <file>StreamAudioEnded.xml</file>
      <file>StreamFrames.xml</file>
      <file>StreamVideoEnded.xml</file>
      <file>UpdatedGroupCallParticipant.xml</file>
    </group>
  </files-list>
</config>
