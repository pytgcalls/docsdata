<page>
    <h1>Getting Started</h1>
    <text>
        This section provides documentation for the NTgCalls C API, which allows you to use NTgCalls in various programming languages,
        including C, C++, Go, Rust, Deno, and more.
        Below, you will find detailed information about the initialization and cleanup functions.
    </text>
    <separator/>
    <h2>Initialization</h2>
    <text>
        To get started with NTgCalls in your application, you need to initialize the library using the <code>ntg_init</code> function.
        This function sets up the necessary resources and prepares NTgCalls for use.
    </text>
    <alert type="important">
        Make sure to call <code>ntg_init</code> before using any other NTgCalls functions.
    </alert>
    <subtext>
        <h3>Example</h3>
        <syntax-highlight language="c" mark="4">
            #include "ntgcalls.h"

            int main() {
                uintptr_t ptr = ntg_init();

                ... // Your Code Here
                return 0;
            }
        </syntax-highlight>
    </subtext>

    <h2>Cleanup</h2>
    <text>
        To clean up and release the resources used by NTgCalls, you should call the <code>ntg_destroy</code> function.
        This function deallocates memory and performs necessary cleanup operations.
    </text>
    <alert type="warning">
        Always call <code>ntg_destroy</code> when you are done using NTgCalls to prevent memory leaks and resource issues.
    </alert>
    <subtext>
        <h3>Example</h3>
        <syntax-highlight language="c" mark="7">
            #include "ntgcalls.h"

            int main() {
                uintptr_t ptr = ntg_init();
                ... // Your Code Here

                int result = ntg_destroy(uid);
                if (result != 0) {
                    printf("NTgCalls cleanup failed.\n");
                    return 1;
                }
                return 0;
            }
        </syntax-highlight>
    </subtext>

    <separator/>
    <h2>Library Version</h2>
    <text>
        You can retrieve the version of the NTgCalls library currently in use using the <code>ntg_get_version</code> function.
        This function returns a string containing the version number.
    </text>
    <subtext>
        <h3>Example</h3>
        <syntax-highlight language="c" mark="6">
            #include "ntgcalls.h"
            #include &lt;stdio.h&gt;

            int main() {
                char* version;
                ntg_get_version(&amp;version);
                printf("NTgCalls Version: %s\n", version);
                return 0;
            }
        </syntax-highlight>
        <separator/>
        <br/>
        <h3>Details</h3>
        <category-title noref="true">
            <ref><shi language="c">int</shi> <sb>ntg_get_version</sb></ref>()
        </category-title>
        <subtext>
            <text>Retrieve library version</text>
            <br/>
            <category>
                <pg-title>PARAMETERS</pg-title>
                <subtext>
                    <category-title><shi language="c">char**</shi> <ref>buffer</ref></category-title>
                    <subtext><text>A character buffer to store the version string.</text></subtext>
                </subtext>
            </category>
        </subtext>
    </subtext>
</page>