<page>
    <h1>Introduction</h1>
    <text>
        Being a modern library, <b>NTgCalls</b> requires CMake 3.27+ to be built on your system,
        on Linux is required at least CLang 18+ and libx11-dev.
        We recommend using the latest versions of both CMake and CLang.
    </text>
    <alert type="important">
        Before building NTgCalls, check for pre-compiled shared libs on <a href="https://github.com/pytgcalls/ntgcalls/releases">GitHub Releases</a> or
        Python Bindings from <a href="https://pypi.org/project/ntgcalls/">PyPI</a>.
        Building from source may be necessary if pre-compiled packages are not available.
    </alert>
    <separator/>
    <h1>Installing Prerequisites</h1>
    <text>
        Below, we will guide you through the step-by-step process of installing the prerequisites
        required to compile NTgCalls on your operating system.
    </text>
    <subtext>
        <h2>Linux</h2>
        <list style="numbers">
            <item>
                <text>
                    <b>Update the system's package list:</b><br/>
                    First, make sure you have an updated list of packages:
                </text>
                <syntax-highlight language="bash">
                    $ sudo apt update
                </syntax-highlight>
            </item>
            <item>
                <text>
                    <b>Build Essential, libx11-dev, Clang 18 and etc:</b><br/>
                    This section provides instructions on how to install four specific packages: libx11-dev,
                    build-essential, curl and Clang version 18. Use the following command:
                </text>
                <multisyntax id="os_requirements">
                    <tabs>
                        <tab id="x86">x86_64</tab>
                        <tab id="arm">ARM64</tab>
                    </tabs>
                    <syntax-highlight language="bash" id="x86">
                        $ sudo apt install libx11-dev build-essential curl
                    </syntax-highlight>
                    <syntax-highlight language="bash" id="arm">
                        $ sudo apt install libx11-dev build-essential curl
                        $ curl -s https://apt.llvm.org/llvm.sh | sudo bash -s -- 18
                    </syntax-highlight>
                </multisyntax>
            </item>
        </list>
        <h2>Windows</h2>
        <list style="numbers">
            <item>
                <text>
                    <b>Install Microsoft Visual Studio 2019:</b><br/>
                    Install Microsoft Visual Studio 2019 with the C++ workload. You can download it from the <a href="https://visualstudio.microsoft.com/downloads/">official website</a>.
                </text>
            </item>
            <item>
                <text>
                    <b>Download CMake Installer:</b><br/>
                    Download the CMake installer for Windows from the <a href="https://cmake.org/download/">official website</a>.
                </text>
            </item>
            <item>
                <text>
                    <b>Run Installer:</b><br/>
                    Run the downloaded CMake installer and follow the installation wizard instructions.
                    Make sure to select the option to add CMake to the system PATH during installation.
                </text>
            </item>
        </list>
        <h2>macOS</h2>
        <list style="numbers">
            <item>
                <text>
                    <b>Install Xcode Command Line Tools:</b><br/>
                    If you don't have Xcode installed, you can install the Command Line Tools separately. Open a terminal and run the following command:
                </text>
                <subtext>
                    <syntax-highlight language="bash">
                        $ xcode-select --install
                    </syntax-highlight>
                </subtext>
            </item>
            <item>
                <text>
                    <b>Install CMake:</b><br/>
                    Open a terminal and run the following command to install CMake:
                </text>
                <subtext>
                    <syntax-highlight language="bash">
                        $ brew install cmake
                    </syntax-highlight>
                </subtext>
            </item>
        </list>
    </subtext>
    <separator/>
    <h1>Cloning and Building</h1>
    <text>
        In this section, you'll learn how to clone the NTgCalls repository and build the library from source.
    </text>
    <subtext>
        <h2>Cloning the Repo</h2>
        <text>
            To begin building NTgCalls from source, you need to clone the GitHub repository. Follow these steps to clone the repo:
        </text>
        <list style="numbers">
            <item>
                <text>
                    <b>Change to the Directory Where You Want to Clone the Repo:</b><br/>
                    Navigate to the directory where you want to store the NTgCalls source code. You can use the `cd` command to change directories.
                </text>
                <syntax-highlight language="bash">
                    $ cd /path/to/your/directory
                </syntax-highlight>
            </item>
            <item>
                <text>
                    <b>Clone the NTgCalls Repository:</b><br/>
                    Use the following command to clone the NTgCalls GitHub repository:
                </text>
                <syntax-highlight language="bash">
                    $ git clone https://github.com/pytgcalls/ntgcalls.git --recursive
                </syntax-highlight>
            </item>
        </list>
        <h2>Compilation</h2>
        <text>
            Now that you have successfully installed all the required prerequisites for NTgCalls,
            it's time to build the library.
            Follow these steps to compile NTgCalls on your system.
        </text>
        <alert type="important">
            It's essential to have Python 3.8+ installed on your server.
        </alert>
        <subtext>
            <h3>Building Shared Library</h3>
            <text>
                For developers looking to use NTgCalls with C and C++, we provide C Bindings.
                Follow these steps to compile NTgCalls with C Bindings in either Release or Debug mode:
            </text>
            <list style="numbers">
                <item>
                    <text>
                        <b>Change Directory:</b><br/>
                        Navigate to the root directory of the NTgCalls project:
                    </text>
                    <syntax-highlight language="bash">
                        $ cd /path/to/ntgcalls
                    </syntax-highlight>
                </item>
                <item>
                    <text>
                        <b>Generate Library:</b><br/>
                        Run the following command to generate the libraries:
                    </text>
                    <multisyntax id="build_type">
                        <tabs>
                            <tab id="debug">Debug</tab>
                            <tab id="release">Release</tab>
                        </tabs>
                        <syntax-highlight language="bash" id="debug">
                            # Shared
                            $ python3 setup.py build_lib --debug
                            # Static
                            $ python3 setup.py build_lib --debug --static
                        </syntax-highlight>
                        <syntax-highlight language="bash" id="release">
                            # Shared
                            $ python3 setup.py build_lib
                            # Static
                            $ python3 setup.py build_lib --static
                        </syntax-highlight>
                    </multisyntax>
                </item>
            </list>
            <br/>
            <h3>Building Python Bindings</h3>
            <text>
                NTgCalls offers Python Bindings, facilitating seamless integration with Python.
                Follow these steps to compile NTgCalls with Python Bindings:
            </text>
            <list style="numbers">
                <item>
                    <text>
                        <b>Change Directory:</b><br/>
                        Navigate to the root directory of the NTgCalls project:
                    </text>
                    <syntax-highlight language="bash">
                        $ cd /path/to/ntgcalls
                    </syntax-highlight>
                </item>
                <item>
                    <text>
                        <b>Install Python Bindings:</b><br/>
                        Run the following command to install the Python Bindings:
                    </text>
                    <syntax-highlight language="bash">
                        $ pip3 install . -U
                    </syntax-highlight>
                </item>
            </list>
        </subtext>
    </subtext>
</page>